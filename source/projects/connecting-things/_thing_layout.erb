<% wrap_layout :project_layout do %>
<script src="../js/lottie.js"> </script>

<div class="bleed walkthrough">
  <div class="flex container">
    <div class="col-4 thing-space">
      <div class="padded">
        <img id="thing" src="">
      </div>
    </div>
    <div class="col-4 flow-space">
      <div class="padded">
        <div id="network"></div>
      </div>
    </div>
    <div class="col-4 screen-space">
      <div class="padded">
        <img id="screen" src="">
      </div>
    </div>
  </div>
</div>

<div class="bleed cool-grey-80">
  <div class="flex container walkthrough-controls">
    <div class="col-2">
      <div class="padded">
        <a href="#" id="prev-button" class="disabled">
          <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
          	 width="20px" height="20px" viewBox="0 0 20 20" style="enable-background:new 0 0 20 20;" xml:space="preserve">
          <path class="arrow" d="M17,9H4.414l6.293-6.293c0.391-0.391,0.391-1.023,0-1.414s-1.023-0.391-1.414,0l-8,8c0,0,0,0-0.001,0.001
          	L0.586,10l0.707,0.707c0,0,0,0,0.001,0.001l8,8C9.488,18.902,9.744,19,10,19s0.512-0.098,0.707-0.293
          	c0.391-0.391,0.391-1.023,0-1.414L4.414,11H17c0.552,0,1-0.448,1-1S17.552,9,17,9z"/>
          </svg>
          <p>previous</p>
        </a>
      </div>
    </div>
    <div class="col-8">
      <div class="padded">
        <p class="current-step" id="stepcount"></p>
      </div>
    </div>
    <div class="col-2">
      <div class="padded">
        <a href="#" id="next-button">
          <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
             width="20px" height="20px" viewBox="0 0 20 20" style="enable-background:new 0 0 20 20;" xml:space="preserve">
          <path class="arrow" d="M18.708,10.706L19.414,10l-0.706-0.706c-0.001-0.001-0.001-0.001-0.002-0.002l-7.999-7.999
            c-0.391-0.391-1.023-0.391-1.414,0s-0.391,1.023,0,1.414L15.586,9H3c-0.553,0-1,0.448-1,1s0.447,1,1,1h12.586l-6.293,6.293
            c-0.391,0.391-0.391,1.023,0,1.414C9.488,18.902,9.744,19,10,19s0.512-0.098,0.707-0.293l7.999-7.999
            C18.707,10.707,18.707,10.707,18.708,10.706z"/>
          </svg>
          <p>next</p>
        </a>
      </div>
    </div>

    <div class="col-12">
      <div class="padded-caption">
        <p class="current-step" id="caption"></p>
      </div>
    </div>
  </div>
  <div class="container flex walkthrough-transcript">
    <div class="col-8 left-2 right-2">
      <div class="padded" id="transcript">
        <!-- will have transcript written by script -->
      </div>
    </div>
  </div>
</div>

<div class="bleed cool-grey-10">
  <div class="flex container extra-bottom">
    <div class="col-12">
      <div class="padded">
        <h1 class="title"><%= current_page.data.title %></h1>
<!--
        What is this? The total number (also seen in the caption) or UI steps or connection states, orâ€¦?
        <h3 class="step-count">6 Steps</h3>
 -->
      </div>
    </div>

    <div class="col-10 right-1 left-1">
      <div class="padded">

        <%= yield %>

      </div>
    </div>
  </div>
</div>

<script>

// some variables so we don't waste cycles looking for elements over and over
var $thing = $('#thing');
var $network = $('#network');
var $screen = $('#screen');
var $counter = $('#stepcount');
var $caption = $('#caption');
var $transcript = $('#transcript');
var $prevButton = $('#prev-button');
var $nextButton = $('#next-button');

// variable that will increment through the steps
var currentStep = 0;
var totalSteps = flowSteps.length;

// THING

function renderCurrentThing() {
  step = currentStep
  // repeating check in case currentStep changed during fade out
  newSrc = findLastThingPath(step);
  if ($thing.attr('src') != newSrc) {
    $thing.attr('src', newSrc);
    $thing.on('load', function() {
      $thing.stop().fadeTo(200,1);
    });
  } else {
    $thing.stop().fadeTo(0,1);
  }
  $thing.data('step', step);
  $thing.attr('title', 'step ' + (step+1));
}

function swapThing() {
  newSrc = findLastThingPath(currentStep);
  if ($thing.attr('src') != newSrc) {
    $thing.stop().fadeTo(50,0.0, renderCurrentThing);
  }
}

function findLastThingPath(number) {
  // console.log('looking for thing image', number);
  if (flowSteps[number].thingImg) {
    return flowSteps[number].thingImg;
  } else if (number > 0) {
    return findLastThingPath(number-1);
  } else {
    return "";
  }
}

// SCREEN (same as thing, not very DRY)

function renderCurrentScreen() {
  step = currentStep
  // repeating check in case currentStep changed during fade out
  newSrc = findLastScreenPath(step);
  if ($screen.attr('src') != newSrc) {
    $screen.attr('src', newSrc);
    $screen.on('load', function() {
      $screen.stop().fadeTo(200,1);
    });
  } else {
    $screen.stop().fadeTo(0,1);
  }
  $screen.data('step', step);
  $screen.attr('title', 'step ' + (step+1));
}

function swapScreen() {
  newSrc = findLastScreenPath(currentStep);
  if ($screen.attr('src') != newSrc) {
    $screen.stop().fadeTo(50,0.0, renderCurrentScreen);
  }
}

function findLastScreenPath(number) {
  if (flowSteps[number].screenImg) {
    return flowSteps[number].screenImg;
  } else if (number > 0) {
    return findLastScreenPath(number-1);
  } else {
    return "";
  }
}

// NETWORK

function findLastNetworkAnimations(number) {
  if (flowSteps[number].networkAnimations) {
    return flowSteps[number].networkAnimations;
  } else if (number > 0) {
    return findLastNetworkAnimations(number-1);
  } else {
    return [];
  }
}

function setAnimationLayers(layers) {
  if (typeof layers !== 'undefined' && layers.length > 0) {
    $network.empty(); // clear previous layers

    for (var i = 0; i < layers.length; i++) {
      var filename = layers[i];
      var $layer = $('<div></div>');
      $layer.css({
        position: 'absolute',
        top: '0'
      });
      var layerElement = $layer.get(0);
      lottie.loadAnimation({
        container: layerElement,
        renderer: 'svg',
        loop: false,
        autoplay: false,
        path: '../animations/' + filename
      });
      $network.append($layer);
    }

    lottie.play();
  }
};

// TRANSCRIPT

function renderTranscript() {
  var list = $('<ol></ol>');
  for (var i = 0; i < flowSteps.length; i++) {
    step = flowSteps[i];
    var li = $('<li>'+step.caption+'</li>').addClass('transcript-step').data('step',i);
    list.append(li);
  }
  $transcript.append(list);
  $('.transcript-step').each(function() {
    var $this = $(this);
    $this.on("click", function () {
      currentStep = $(this).data('step')
      renderCurrentStep();
    });
  });
}

function markTranscript() {
  $('.transcript-step').each(function() {
    var $this = $(this);
    if ($this.data('step') == currentStep) {
      $this.addClass('current');
    } else {
      $this.removeClass('current');
    }
  });
}

// make it happen

function renderCurrentStep() {
  number = currentStep;
  var caption = flowSteps[number].caption;
  // var thingPath = findCurrentThingPath();
  var networkAnimations = findLastNetworkAnimations(number);
  var screenPath = findLastScreenPath(number);

  // set caption
  $counter.text((currentStep+1)+'/'+totalSteps);
  $caption.text(caption);
  swapThing();
  setAnimationLayers(networkAnimations);
  swapScreen();

  // manage button visibility
  if (currentStep == 0) {
    $prevButton.addClass('disabled');
  } else {
    $prevButton.removeClass('disabled');
  }
  if (currentStep == totalSteps-1) {
    $nextButton.addClass('disabled');
  } else {
    $nextButton.removeClass('disabled');
  }

  markTranscript();
};

$(document).ready(function() {

  $caption.on('click', function(){
    $transcript.slideToggle();
  })

  $prevButton.on('click', function(){
    event.preventDefault();
    if (currentStep > 0) {
      currentStep--;
      renderCurrentStep();
    }
  });
  $nextButton.on('click', function(){
    event.preventDefault();
    if (currentStep < totalSteps-1) {
      currentStep++;
      renderCurrentStep();
    }
  });

  renderTranscript();

  currentStep = 0;
  renderCurrentStep();
});

</script>

<% end # project_layout %>
